"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4798],{26415:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>l,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var n=s(74848),i=s(28453);const a={sidebar_position:3},t="Serializer Middleware",o={id:"guides/middlewares/serializer-middleware",title:"Serializer Middleware",description:"In this section, we will learn how to use the Serializer Middleware.",source:"@site/versioned_docs/version-2.x/guides/middlewares/serializer-middleware.md",sourceDirName:"guides/middlewares",slug:"/guides/middlewares/serializer-middleware",permalink:"/kafkaflow/docs/2.x/guides/middlewares/serializer-middleware",draft:!1,unlisted:!1,editUrl:"https://github.com/farfetch/kafkaflow/tree/master/website/versioned_docs/version-2.x/guides/middlewares/serializer-middleware.md",tags:[],version:"2.x",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Typed Handler Middleware",permalink:"/kafkaflow/docs/2.x/guides/middlewares/typed-handler-middleware"},next:{title:"Compressor Middleware",permalink:"/kafkaflow/docs/2.x/guides/middlewares/compressor-middleware"}},l={},d=[{value:"How to use it",id:"how-to-use-it",level:2},{value:"Adding Schema Registry support",id:"adding-schema-registry-support",level:2},{value:"Creating a Message Type Resolver",id:"creating-a-message-type-resolver",level:2}];function c(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"serializer-middleware",children:"Serializer Middleware"}),"\n",(0,n.jsx)(r.p,{children:"In this section, we will learn how to use the Serializer Middleware."}),"\n",(0,n.jsx)(r.p,{children:"The Serializer Middleware is used to serialize and deserialize messages."}),"\n",(0,n.jsx)(r.p,{children:"You can use one of the following common serializers or build your own:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"https://www.nuget.org/packages/KafkaFlow.Serializer.ProtobufNet/",children:"KafkaFlow.Serializer.ProtoBufNet"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"https://www.nuget.org/packages/KafkaFlow.Serializer.JsonCore/",children:"KafkaFlow.Serializer.JsonCore"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"https://www.nuget.org/packages/KafkaFlow.Serializer.NewtonsoftJson/",children:"KafkaFlow.Serializer.NewtonsoftJson"})}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"how-to-use-it",children:"How to use it"}),"\n",(0,n.jsxs)(r.p,{children:["Install the ",(0,n.jsx)(r.a,{href:"https://www.nuget.org/packages/KafkaFlow.Serializer",children:"KafkaFlow.Serializer"})," package."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"dotnet add package KafkaFlow.Serializer\n"})}),"\n",(0,n.jsxs)(r.p,{children:["On the configuration, add the ",(0,n.jsx)(r.code,{children:"AddSerializer"})," extension method to your producer/consumer middlewares to use it."]}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"AddSerializer"})," method has two arguments:"]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["The first one must implement the ",(0,n.jsx)(r.code,{children:"IMessageSerializer"})," interface."]}),"\n",(0,n.jsxs)(r.li,{children:["The second one is optional and must implement the ",(0,n.jsx)(r.code,{children:"IMessageTypeResolver"})," interface. If the parameter is not provided, then the ",(0,n.jsx)(r.code,{children:"DefaultTypeResolver"})," will be used.\nBoth classes can be provided as an argument through a factory method too."]}),"\n"]}),"\n",(0,n.jsx)(r.admonition,{type:"tip",children:(0,n.jsxs)(r.p,{children:["For topics that have just one message type, use the ",(0,n.jsx)(r.code,{children:"AddSingleTypeSerializer"})," method."]})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",children:'services.AddKafka(kafka => kafka\n    .AddCluster(cluster => cluster\n        .WithBrokers(new[] { "localhost:9092" })\n        .AddProducer<ProductEventsProducer>(producer => producer\n            ...\n            .AddMiddlewares(middlewares => middleware\n                ...\n                .AddSerializer<JsonMessageSerializer>() // Using the DefaultMessageTypeResolver\n                // or\n                .AddSerializer<JsonMessageSerializer, YourTypeResolver>()\n                // or\n                .AddSerializer(\n                    resolver => new JsonMessageSerializer(...),\n                    resolver => new YourTypeResolver(...))\n                // or\n                .AddSingleTypeSerializer<JsonMessageSerializer, YourMessageType>()\n                // or\n                .AddSingleTypeSerializer<YourMessageType>(resolver => new JsonMessageSerializer(...))\n                ...\n            )\n        )\n    )\n);\n\n'})}),"\n",(0,n.jsx)(r.h2,{id:"adding-schema-registry-support",children:"Adding Schema Registry support"}),"\n",(0,n.jsx)(r.p,{children:"Serializer middlewares can be used along with schema registry allowing the evolution of schemas according to the configured compatibility setting."}),"\n",(0,n.jsxs)(r.p,{children:["Install the ",(0,n.jsx)(r.a,{href:"https://www.nuget.org/packages/KafkaFlow.SchemaRegistry/",children:"KafkaFlow.SchemaRegistry"})," package, configure the schema registry broker, and use one of the following packages to use all the schema registry integration features."]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"https://www.nuget.org/packages/KafkaFlow.Serializer.SchemaRegistry.ConfluentJson/",children:"KafkaFlow.Serializer.SchemaRegistry.ConfluentJson"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"https://www.nuget.org/packages/KafkaFlow.Serializer.SchemaRegistry.ConfluentAvro/",children:"KafkaFlow.Serializer.SchemaRegistry.ConfluentAvro"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"https://www.nuget.org/packages/KafkaFlow.Serializer.ConfluentProtobuf/",children:"KafkaFlow.Serializer.SchemaRegistry.ConfluentProtobuf"})}),"\n"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",children:'public class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddKafka(\n            kafka => kafka\n                .AddCluster(\n                    cluster => cluster\n                        .WithBrokers(new[] { "localhost:9092" })\n                        .WithSchemaRegistry(config => config.Url = "localhost:8081")\n                        .AddProducer(\n                            ...\n                            .AddMiddlewares(middlewares => \n                                    middlewares.AddSchemaRegistryAvroSerializer(new AvroSerializerConfig{ SubjectNameStrategy = SubjectNameStrategy.TopicRecord })\n                        )\n                       .AddConsumer(\n                            ...\n                            .AddMiddlewares(middlewares => middlewares.AddSchemaRegistryAvroSerializer()\n                        )\n                    )\n            );\n    }\n}\n'})}),"\n",(0,n.jsx)(r.admonition,{type:"info",children:(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.a,{href:"https://www.nuget.org/packages/KafkaFlow.Serializer.SchemaRegistry.ConfluentAvro/",children:"ConfluentAvro"})," and ",(0,n.jsx)(r.a,{href:"https://www.nuget.org/packages/KafkaFlow.Serializer.ConfluentProtobuf/",children:"ConfluentProtobuf"})," type resolvers can support multiple types per topic however, due to the JSON serialization format used by ",(0,n.jsx)(r.a,{href:"https://docs.confluent.io/platform/current/clients/confluent-kafka-dotnet/_site/api/Confluent.SchemaRegistry.Serdes.JsonSerializer-1.html",children:"confluent-kafka-dotnet"}),", ",(0,n.jsx)(r.a,{href:"https://www.nuget.org/packages/KafkaFlow.Serializer.SchemaRegistry.ConfluentJson/",children:"ConfluentJson"})," type resolver can only resolve a single type of message per topic."]})}),"\n",(0,n.jsx)(r.admonition,{type:"info",children:(0,n.jsxs)(r.p,{children:["To be able to publish multiple type messages per topic, ",(0,n.jsx)(r.code,{children:"SubjectNameStrategy.Record"})," or ",(0,n.jsx)(r.code,{children:"SubjectNameStrategy.TopicRecord"})," must be used.\nYou can see a detailed explanation ",(0,n.jsx)(r.a,{href:"https://docs.confluent.io/platform/current/schema-registry/serdes-develop/index.html#subject-name-strategy",children:"here"}),"."]})}),"\n",(0,n.jsx)(r.h2,{id:"creating-a-message-type-resolver",children:"Creating a Message Type Resolver"}),"\n",(0,n.jsx)(r.p,{children:"A type resolver is needed to instruct the middleware where to find the destination message type in the message metadata when consuming and where to store it when producing."}),"\n",(0,n.jsxs)(r.p,{children:["The framework has the ",(0,n.jsx)(r.code,{children:"DefaultTypeResolver"})," that will be used omitting the second type parameter in the ",(0,n.jsx)(r.code,{children:"AddSerializer"})," method. You can create your own implementation of ",(0,n.jsx)(r.code,{children:"IMessageTypeResolver"})," to allow communication with other frameworks."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",children:'public class SampleMessageTypeResolver : IMessageTypeResolver\n{\n    private const string MessageType = "MessageType";\n\n    public Type OnConsume(IMessageContext context)\n    {\n        var typeName = context.Headers.GetString(MessageType);\n\n        return Type.GetType(typeName);\n    }\n\n    public void OnProduce(IMessageContext context)\n    {\n        context.Headers.SetString(\n            MessageType,\n            $"{context.Message.GetType().FullName}, {context.Message.GetType().Assembly.GetName().Name}");\n    }\n}\n'})})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,r,s)=>{s.d(r,{R:()=>t,x:()=>o});var n=s(96540);const i={},a=n.createContext(i);function t(e){const r=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);