"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9838],{28453:(e,a,r)=>{r.d(a,{R:()=>n,x:()=>c});var s=r(96540);const t={},l=s.createContext(t);function n(e){const a=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:n(e.components),s.createElement(l.Provider,{value:a},e.children)}},50993:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>i,contentTitle:()=>n,default:()=>d,frontMatter:()=>l,metadata:()=>c,toc:()=>o});var s=r(74848),t=r(28453);const l={},n="KafkaFlow.SchemaRegistry assembly",c={id:"reference/KafkaFlow.SchemaRegistry/KafkaFlow.SchemaRegistry",title:"KafkaFlow.SchemaRegistry assembly",description:"KafkaFlow namespace",source:"@site/docs/reference/KafkaFlow.SchemaRegistry/KafkaFlow.SchemaRegistry.md",sourceDirName:"reference/KafkaFlow.SchemaRegistry",slug:"/reference/KafkaFlow.SchemaRegistry/",permalink:"/kafkaflow/docs/reference/KafkaFlow.SchemaRegistry/",draft:!1,unlisted:!1,editUrl:"https://github.com/farfetch/kafkaflow/tree/master/website/docs/reference/KafkaFlow.SchemaRegistry/KafkaFlow.SchemaRegistry.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SchemaRegistryTypeResolver.OnProduceAsync method",permalink:"/kafkaflow/docs/reference/KafkaFlow.SchemaRegistry/KafkaFlow/SchemaRegistryTypeResolver/OnProduceAsync"},next:{title:"KafkaFlow.Serializer.JsonCore",permalink:"/kafkaflow/docs/category/kafkaflowserializerjsoncore"}},i={},o=[{value:"KafkaFlow namespace",id:"kafkaflow-namespace",level:2}];function f(e){const a={a:"a",h1:"h1",h2:"h2",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h1,{id:"kafkaflowschemaregistry-assembly",children:"KafkaFlow.SchemaRegistry assembly"}),"\n",(0,s.jsx)(a.h2,{id:"kafkaflow-namespace",children:"KafkaFlow namespace"}),"\n",(0,s.jsxs)(a.table,{children:[(0,s.jsx)(a.thead,{children:(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.th,{children:"public type"}),(0,s.jsx)(a.th,{children:"description"})]})}),(0,s.jsxs)(a.tbody,{children:[(0,s.jsxs)(a.tr,{children:[(0,s.jsxs)(a.td,{children:["static\xa0class\xa0",(0,s.jsx)(a.a,{href:"/kafkaflow/docs/reference/KafkaFlow.SchemaRegistry/KafkaFlow/ClusterConfigurationBuilderExtensions/",children:"ClusterConfigurationBuilderExtensions"})]}),(0,s.jsx)(a.td,{children:"No needed"})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsxs)(a.td,{children:["abstract\xa0class\xa0",(0,s.jsx)(a.a,{href:"/kafkaflow/docs/reference/KafkaFlow.SchemaRegistry/KafkaFlow/ConfluentDeserializerWrapper/",children:"ConfluentDeserializerWrapper"})]}),(0,s.jsx)(a.td,{children:"A wrapper to call the typed Confluent deserializers"})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsxs)(a.td,{children:["abstract\xa0class\xa0",(0,s.jsx)(a.a,{href:"/kafkaflow/docs/reference/KafkaFlow.SchemaRegistry/KafkaFlow/ConfluentSerializerWrapper/",children:"ConfluentSerializerWrapper"})]}),(0,s.jsx)(a.td,{children:"A wrapper to call the typed Confluent serializers and deserializers"})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsxs)(a.td,{children:["interface\xa0",(0,s.jsx)(a.a,{href:"/kafkaflow/docs/reference/KafkaFlow.SchemaRegistry/KafkaFlow/ISchemaRegistryTypeNameResolver/",children:"ISchemaRegistryTypeNameResolver"})]}),(0,s.jsx)(a.td,{children:"An interface to implement a type name resolver to messages serialized with schema registry serializers"})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsxs)(a.td,{children:["class\xa0",(0,s.jsx)(a.a,{href:"/kafkaflow/docs/reference/KafkaFlow.SchemaRegistry/KafkaFlow/SchemaRegistryTypeResolver/",children:"SchemaRegistryTypeResolver"})]}),(0,s.jsx)(a.td,{children:"The message type resolver to be used with schema registry serializers"})]})]})]})]})}function d(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(f,{...e})}):f(e)}}}]);