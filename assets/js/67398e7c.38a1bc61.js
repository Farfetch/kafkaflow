"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7045],{392:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>u,contentTitle:()=>a,default:()=>l,frontMatter:()=>t,metadata:()=>s,toc:()=>c});var r=o(74848),i=o(28453);const t={sidebar_position:3},a="Dynamic Worker Configuration",s={id:"guides/consumers/dynamic-workers-configuration",title:"Dynamic Worker Configuration",description:"In this section, we will learn how Dynamic Worker Configuration works and how to configure it. In version 3 of KafkaFlow, we have introduced a new feature that allows you to dynamically configure the number of workers for a specific consumer based on a custom algorithm. This feature enables greater flexibility in managing worker threads, as each application instance can have a different number of workers, depending on the algorithm you define.",source:"@site/docs/guides/consumers/dynamic-workers-configuration.md",sourceDirName:"guides/consumers",slug:"/guides/consumers/dynamic-workers-configuration",permalink:"/kafkaflow/docs/guides/consumers/dynamic-workers-configuration",draft:!1,unlisted:!1,editUrl:"https://github.com/farfetch/kafkaflow/tree/master/website/docs/guides/consumers/dynamic-workers-configuration.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Add Consumers",permalink:"/kafkaflow/docs/guides/consumers/add-consumers"},next:{title:"Built-in Dynamic Workers Algorithms",permalink:"/kafkaflow/docs/category/built-in-dynamic-workers-algorithms"}},u={},c=[{value:"Use Case Example",id:"use-case-example",level:2},{value:"How to Configure",id:"how-to-configure",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"dynamic-worker-configuration",children:"Dynamic Worker Configuration"}),"\n",(0,r.jsx)(n.p,{children:"In this section, we will learn how Dynamic Worker Configuration works and how to configure it. In version 3 of KafkaFlow, we have introduced a new feature that allows you to dynamically configure the number of workers for a specific consumer based on a custom algorithm. This feature enables greater flexibility in managing worker threads, as each application instance can have a different number of workers, depending on the algorithm you define."}),"\n",(0,r.jsx)(n.p,{children:"This documentation page explains how to use and configure this feature effectively."}),"\n",(0,r.jsx)(n.h2,{id:"use-case-example",children:"Use Case Example"}),"\n",(0,r.jsx)(n.p,{children:"Imagine a scenario where your application's message load varies throughout the day. During peak hours, you want to allocate more worker threads to process messages quickly, and during off-peak hours, you want to reduce the number of worker threads to save resources. This dynamic adjustment can be achieved using the custom dynamic worker configuration feature."}),"\n",(0,r.jsx)(n.h2,{id:"how-to-configure",children:"How to Configure"}),"\n",(0,r.jsx)(n.p,{children:"Configuring Dynamic Worker Configuration is straightforward with the fluent interface provided by KafkaFlow. Here's a simple example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:".AddConsumer(\n    consumer => consumer\n        ...\n        .WithWorkersCount(\n            (context, resolver) =>\n            {\n                // Implement a custom logic to calculate the number of workers\n                if (IsPeakHour(DateTime.UtcNow))\n                {\n                    return Task.FromResult(10); // High worker count during peak hours\n                }\n                else\n                {\n                    return Task.FromResult(2); // Lower worker count during off-peak hours\n                }\n            }, \n            TimeSpan.FromMinutes(15)); // Evaluate the worker count every 15 minutes\n        ...\n        )\n)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In this example, the number of worker threads is adjusted dynamically based on whether it's a peak hour or off-peak hour. You can implement your custom logic in the ",(0,r.jsx)(n.code,{children:"WithWorkersCount"})," method to suit your application's specific requirements."]}),"\n",(0,r.jsx)(n.p,{children:"That's it! Your KafkaFlow consumer will now dynamically adjust the number of worker threads based on your custom logic and the specified evaluation interval."}),"\n",(0,r.jsx)(n.p,{children:"This feature provides a powerful way to optimize resource utilization and throughput in your Kafka-based applications."})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>s});var r=o(96540);const i={},t=r.createContext(i);function a(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);