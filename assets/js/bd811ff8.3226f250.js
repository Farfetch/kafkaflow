"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4123],{28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>t});var o=r(96540);const i={},s=o.createContext(i);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(s.Provider,{value:n},e.children)}},74278:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>c});var o=r(74848),i=r(28453);const s={},a="ConfigurationBuilderExtensions.WithConsumerLagWorkerBalancer method (1 of 2)",t={id:"reference/KafkaFlow/KafkaFlow/ConfigurationBuilderExtensions/WithConsumerLagWorkerBalancer",title:"ConfigurationBuilderExtensions.WithConsumerLagWorkerBalancer method (1 of 2)",description:"Configures the consumer to use the consumer's lag as a metric for dynamically calculating the number of workers for each application instance. The number of workers will be re-evaluated every 5 minutes.",source:"@site/docs/reference/KafkaFlow/KafkaFlow/ConfigurationBuilderExtensions/WithConsumerLagWorkerBalancer.md",sourceDirName:"reference/KafkaFlow/KafkaFlow/ConfigurationBuilderExtensions",slug:"/reference/KafkaFlow/KafkaFlow/ConfigurationBuilderExtensions/WithConsumerLagWorkerBalancer",permalink:"/kafkaflow/docs/reference/KafkaFlow/KafkaFlow/ConfigurationBuilderExtensions/WithConsumerLagWorkerBalancer",draft:!1,unlisted:!1,editUrl:"https://github.com/farfetch/kafkaflow/tree/master/website/docs/reference/KafkaFlow/KafkaFlow/ConfigurationBuilderExtensions/WithConsumerLagWorkerBalancer.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ConfigurationBuilderExtensions.WithConsumerConfig method",permalink:"/kafkaflow/docs/reference/KafkaFlow/KafkaFlow/ConfigurationBuilderExtensions/WithConsumerConfig"},next:{title:"ConfigurationBuilderExtensions.WithCustomFactory method (1 of 2)",permalink:"/kafkaflow/docs/reference/KafkaFlow/KafkaFlow/ConfigurationBuilderExtensions/WithCustomFactory"}},l={},c=[{value:"See Also",id:"see-also",level:2},{value:"See Also",id:"see-also-1",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"configurationbuilderextensionswithconsumerlagworkerbalancer-method-1-of-2",children:"ConfigurationBuilderExtensions.WithConsumerLagWorkerBalancer method (1 of 2)"}),"\n",(0,o.jsx)(n.p,{children:"Configures the consumer to use the consumer's lag as a metric for dynamically calculating the number of workers for each application instance. The number of workers will be re-evaluated every 5 minutes."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"public static IConsumerConfigurationBuilder WithConsumerLagWorkerBalancer(\n    this IConsumerConfigurationBuilder builder, int totalWorkers, int minInstanceWorkers, \n    int maxInstanceWorkers)\n"})}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"parameter"}),(0,o.jsx)(n.th,{children:"description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"builder"}),(0,o.jsx)(n.td,{children:"The consumer's configuration builder."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"totalWorkers"}),(0,o.jsx)(n.td,{children:"The total number of workers to be distributed across all application instances. The sum of workers across all instances will approximate this number."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"minInstanceWorkers"}),(0,o.jsx)(n.td,{children:"The minimum number of workers for each application instance."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"maxInstanceWorkers"}),(0,o.jsx)(n.td,{children:"The maximum number of workers for each application instance."})]})]})]}),"\n",(0,o.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["class\xa0",(0,o.jsx)(n.a,{href:"/kafkaflow/docs/reference/KafkaFlow/KafkaFlow/ConfigurationBuilderExtensions/",children:"ConfigurationBuilderExtensions"})]}),"\n",(0,o.jsxs)(n.li,{children:["namespace\xa0",(0,o.jsx)(n.a,{href:"/kafkaflow/docs/reference/KafkaFlow/",children:"KafkaFlow"})]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h1,{id:"configurationbuilderextensionswithconsumerlagworkerbalancer-method-2-of-2",children:"ConfigurationBuilderExtensions.WithConsumerLagWorkerBalancer method (2 of 2)"}),"\n",(0,o.jsx)(n.p,{children:"Configures the consumer to use the consumer's lag as a metric for dynamically calculating the number of workers for each application instance."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"public static IConsumerConfigurationBuilder WithConsumerLagWorkerBalancer(\n    this IConsumerConfigurationBuilder builder, int totalWorkers, int minInstanceWorkers, \n    int maxInstanceWorkers, TimeSpan evaluationInterval)\n"})}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"parameter"}),(0,o.jsx)(n.th,{children:"description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"builder"}),(0,o.jsx)(n.td,{children:"The consumer's configuration builder."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"totalWorkers"}),(0,o.jsx)(n.td,{children:"The total number of workers to be distributed across all application instances. The sum of workers across all instances will approximate this number."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"minInstanceWorkers"}),(0,o.jsx)(n.td,{children:"The minimum number of workers for each application instance."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"maxInstanceWorkers"}),(0,o.jsx)(n.td,{children:"The maximum number of workers for each application instance."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"evaluationInterval"}),(0,o.jsx)(n.td,{children:"The interval at which the number of workers will be recalculated based on consumer's lag."})]})]})]}),"\n",(0,o.jsx)(n.h2,{id:"see-also-1",children:"See Also"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["class\xa0",(0,o.jsx)(n.a,{href:"/kafkaflow/docs/reference/KafkaFlow/KafkaFlow/ConfigurationBuilderExtensions/",children:"ConfigurationBuilderExtensions"})]}),"\n",(0,o.jsxs)(n.li,{children:["namespace\xa0",(0,o.jsx)(n.a,{href:"/kafkaflow/docs/reference/KafkaFlow/",children:"KafkaFlow"})]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);