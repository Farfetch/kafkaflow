"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[178],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(96540);const a={},o=i.createContext(a);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(o.Provider,{value:n},e.children)}},97166:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var i=t(74848),a=t(28453);const o={sidebar_position:10,sidebar_label:"OpenTelemetry"},r="OpenTelemetry instrumentation",s={id:"guides/open-telemetry",title:"OpenTelemetry instrumentation",description:"In this section, we will explore how to enable OpenTelemetry instrumentation when using KafkaFlow.",source:"@site/docs/guides/open-telemetry.md",sourceDirName:"guides",slug:"/guides/open-telemetry",permalink:"/kafkaflow/docs/guides/open-telemetry",draft:!1,unlisted:!1,editUrl:"https://github.com/farfetch/kafkaflow/tree/master/website/docs/guides/open-telemetry.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,sidebar_label:"OpenTelemetry"},sidebar:"tutorialSidebar",previous:{title:"Global Events",permalink:"/kafkaflow/docs/guides/global-events"},next:{title:"Dependency Injection",permalink:"/kafkaflow/docs/guides/dependency-injection"}},c={},d=[{value:"Including OpenTelemetry instrumentation in your code",id:"including-opentelemetry-instrumentation-in-your-code",level:2},{value:"Advanced Configuration",id:"advanced-configuration",level:2},{value:"Enrich",id:"enrich",level:3},{value:"Using .NET Automatic Instrumentation",id:"using-net-automatic-instrumentation",level:2},{value:"Propagation",id:"propagation",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"opentelemetry-instrumentation",children:"OpenTelemetry instrumentation"}),"\n",(0,i.jsx)(n.p,{children:"In this section, we will explore how to enable OpenTelemetry instrumentation when using KafkaFlow."}),"\n",(0,i.jsxs)(n.p,{children:["KafkaFlow includes support for ",(0,i.jsx)(n.a,{href:"https://opentelemetry.io/docs/concepts/signals/traces/",children:"Traces"})," and ",(0,i.jsx)(n.a,{href:"https://opentelemetry.io/docs/concepts/signals/baggage/",children:"Baggage"})," signals using ",(0,i.jsx)(n.a,{href:"https://opentelemetry.io/docs/instrumentation/net/",children:"OpenTelemetry instrumentation"}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["You can find a sample on how to enable OpenTelemetry ",(0,i.jsx)(n.a,{href:"https://github.com/Farfetch/kafkaflow/tree/master/samples/KafkaFlow.Sample.OpenTelemetry",children:"here"}),"."]})}),"\n",(0,i.jsx)(n.h2,{id:"including-opentelemetry-instrumentation-in-your-code",children:"Including OpenTelemetry instrumentation in your code"}),"\n",(0,i.jsxs)(n.p,{children:["Add the package ",(0,i.jsx)(n.a,{href:"https://www.nuget.org/packages/KafkaFlow.OpenTelemetry/",children:"KafkaFlow.OpenTelemetry"})," to the project and add the extension method ",(0,i.jsx)(n.code,{children:"AddOpenTelemetryInstrumentation"})," in your ",(0,i.jsx)(n.a,{href:"/kafkaflow/docs/guides/configuration",children:"configuration"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"services.AddKafka(\n    kafka => kafka\n        .AddCluster(...)\n        .AddOpenTelemetryInstrumentation()\n);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Once you have your .NET application instrumentation configured (",(0,i.jsx)(n.a,{href:"https://opentelemetry.io/docs/instrumentation/net/getting-started/",children:"see here"}),"), the KafkaFlow activity can be captured by adding the source ",(0,i.jsx)(n.code,{children:"KafkaFlowInstrumentation.ActivitySourceName"})," in the tracer provider builder, e.g.:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:" using var tracerProvider = Sdk.CreateTracerProviderBuilder()\n     .AddSource(KafkaFlowInstrumentation.ActivitySourceName)\n     ...\n"})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-configuration",children:"Advanced Configuration"}),"\n",(0,i.jsx)(n.p,{children:"The instrumentation can be configured to change the default behavior by using KafkaFlowInstrumentationOptions."}),"\n",(0,i.jsx)(n.h3,{id:"enrich",children:"Enrich"}),"\n",(0,i.jsxs)(n.p,{children:["This option can be used to enrich the ",(0,i.jsx)(n.code,{children:"Activity"})," with additional information from ",(0,i.jsx)(n.code,{children:"IMessageContext"})," object. It defines separate methods for producer and consumer enrich:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'services.AddKafka(\n    kafka => kafka\n        .AddCluster(...)\n        .AddOpenTelemetryInstrumentation(options =>\n        {\n            options.EnrichProducer = (activity, messageContext) =>\n            {\n                activity.SetTag("messaging.destination.producername", "KafkaFlowOtel");\n            };\n\n            options.EnrichConsumer = (activity, messageContext) =>\n            {\n                activity.SetTag("messaging.destination.group.id", messageContext.ConsumerContext.GroupId);\n            };\n        })\n);\n'})}),"\n",(0,i.jsx)(n.h2,{id:"using-net-automatic-instrumentation",children:"Using .NET Automatic Instrumentation"}),"\n",(0,i.jsxs)(n.p,{children:["When using ",(0,i.jsx)(n.a,{href:"https://github.com/open-telemetry/opentelemetry-dotnet-instrumentation",children:".NET automatic instrumentation"}),", the KafkaFlow activity can be captured by including the ActivitySource name ",(0,i.jsx)(n.code,{children:"KafkaFlow.OpenTelemetry"})," as a parameter to the variable ",(0,i.jsx)(n.code,{children:"OTEL_DOTNET_AUTO_TRACES_ADDITIONAL_SOURCES"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"propagation",children:"Propagation"}),"\n",(0,i.jsxs)(n.p,{children:["KafkaFlow uses ",(0,i.jsx)(n.a,{href:"https://opentelemetry.io/docs/specs/otel/context/api-propagators/",children:"Propagation"}),", the mechanism that moves context information data between services and processes.\nWhen a message is produced using a KafkaFlow producer and consumed by a KafkaFlow consumer, the context will automatically be propagated."]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);